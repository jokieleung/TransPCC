################################################################################
# training parameters
################################################################################
train:
  experiment_id: "downsample2_transPCC_v12_Adam_lr001_scale_bpp023"
  max_epochs: 200
  use_adam: True
  batch_size: 16 # batch size
  max_nr_pts: 9216 # 9216 # 30000 nr points
  workers: 0 # number of threads to get data
  optimizer: # Adam
    weight_decay: 0.0001 # L2 penalty 
    start_lr: 0.001 # start learning rate
    max_lr: 0.001 # max learning rate / if SGD, starting lr
    end_lr: 0.001 # end learning rate
    pct_incr_cycle: 0.1 # one cycle max at epoch in %
    anneal_strategy: "cos" # "linear" or "cos"
    momentum: 0.9 # if use SGD, sgd momentum
    step_size: 20
    lr_decay: 0.5
  nr_submaps: 0 # nr of maps using for training, 0 for using all maps
  load_pretrained: False # False
  sampling_method: "random" # 'ordered' or 'random'
  map_prob_rate: -1 # every x epochs computes the loss for each train map and sets those as sample distribution, -1 for no update
  loss_weights:
    transf2map: 1.0 # dist(transf, map)    transf = samples + t
    map2transf: 1.0 # dist(map, transf)
    upsampling_reg: 0.2 # chmf dist for intermediate upsampling blocks
  validation:
    report_rate: 1 # every x epochs on tensorboard
    save_result_rate: 500 # every x validations generates one image (doesnt work in docker)


################################################################################
# Voxel Grid parameter (just for data generation)
################################################################################
grid:
  pose_distance: 15
  size: #x,y,z
    - 40.0
    - 40.0
    - 15.0 # ca. -9 to 4 => center at 2.5
  dz: 4.0 # offset to pose center in z direction, = 2.5 - size['z']/2
  voxel_size: 0.1
  max_range: 20.0
  min_range: 2.0
  features: ['intensity','label','eigenvalues','normals']
  feature_dim: [1,1,3,3]
  normal_eigenvalue_radius: 0.5 # radius for computing normals and the eigenvalues

evaluation:
  float16: True # False
  iou_grid:
    resolution: [0.2,0.2,0.1]
  f_score_dist: 0.1 # distance for being outlier
  out_dir: 'experiments/results/kitti/'
################################################################################
# Network parameters
################################################################################
network:
    # a block needs the attributes: type, number_blocks, parameters
  encoder_blocks: # list:* indicates muliple blocks of the same type
  # cfg['num_point'], cfg['nblocks'], cfg['nneighbor'], cfg['input_dim'], cfg['transformer_dim']
    num_point: 9216 # should be the same as max_nr_pts. marked by Jokie
    nblocks: 3
    nneighbor: 16
    input_dim: 3 # number of axis of the input points
    transformer_dim: 512
    down_sample_rate: 2 # change the value set down-sample rate. Marked by Jokie, e.g., 2 for 1/2 down-sample
    channel_dims: [32, 32, 32, 32, 1]
    # channel_dims: [32, 32, 32, 32, 3]
  decoder_blocks:
    num_point: 9216 # should be the same as max_nr_pts. marked by Jokie
    nblocks: 3
    nneighbor: 16
    transformer_dim: 512
    channel_dims: [1, 32, 32, 32]
  out_dir: "network_files/"

################################################################################
# dataset (to find parser)
################################################################################
dataset:
  data_folders:
    grid_output: "/data/" #path/to/the/submaps/
    prefix: "/path/to/kitti/" #only needed for Kitti2Submap conversion (kitti-format)
    train: 
      - "00"
      - "01"
      - "02"
      - "03"
      - "04"
      - "05"
      - "06"
      - "07"
      - "09"
      - "10"
    valid:
      - "validation"
    test:
      - "08"
